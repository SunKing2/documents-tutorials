Contains 
1. learn haskell fast and hard  http://yannesposito.com/Scratch/en/blog/Haskell-the-Hard-Way/
2. programming in haskell


====================
begin http://yannesposito.com/Scratch/en/blog/Haskell-the-Hard-Way/

$ alias rh=runhaskell
$ rh first.hs
Hello, first.hs: Prelude.!!: index too large

The problem is putStrLn ("Hello, " ++ args !! 0)
you are running this program which requires arguments, yet you ran it without any


$rh first doggie
Hello, doggie


GHCI, everything is written in IO monad, this means that 
a = 5
will not work in a real program which requires
let a = 5

try haskell is an online haskell environment

resources:
haskell wiki
haskell in 5 steps for how to get haskell running and start writing programs
real world haskell guide to installing and running GHC

emacs: C-c C-l haskell mode loads ghci and evaluate file
:r to reload file into ghci

louie@Jupiter:~/prog/haskell$ cat p3.hs 
main = putStrLn "Hello World!"
louie@Jupiter:~/prog/haskell$ rh p3
Hello World!


$ cat > p4.hs
f x y = x * x + y * y
main = print (f 2 3)
louie@Jupiter:~/prog/haskell$ rh p4
13

end http://yannesposito.com/Scratch/en/blog/Haskell-the-Hard-Way/
====================




====================
begin Programming in Haskell, 1st ed.

Section 1.1

$ cat p5.hs 
double x = x + x
main = print (double 3)
louie@Jupiter:~/prog/haskell$ rh p5
6

$ cat p6.hs 
double x = x + x
main = print (double (double 2))
louie@Jupiter:~/prog/haskell$ rh p6
8

$ cat p7.hs; rh p7
mysum [] = 0
mysum (x: xs) = x + mysum xs
main = print (mysum [2,3,5])
10

here the second rule states that:
a list comprising of a first element x and a remaining list xs, 
sum is generated by adding x to sum x

$ cat p8.hs; rh p8
myadd [] = []
myadd (x: xs) = x: xs
main = print (myadd ['h', 'e', 'l', 'l', 'o'])
"hello"

$ cat p9.hs; rh p9
myreverse [] = []
myreverse (x: xs) = xs ++ [x]
main = print (myreverse ['h', 'e', 'l', 'l', 'o'])
"elloh"

$ cat p10.hs; rh p10
lowerUpper [] = []
lowerUpper xs = lower ++ upper
                where
                    lower = [x | x <- xs, x > 'Z']
                    upper = [x | x <- xs, x < 'a']
main = print (lowerUpper ['h', 'E', 'L', 'l', 'O'])
"hlELO"


$ cat p11.hs; rh p11
myQuickSort [] = []
myQuickSort (e: xs)  = myQuickSort lower ++ [e] ++ myQuickSort upper
                       where
                           lower = [x | x <- xs, x < e]
                           upper = [x | x <- xs, x >= e]
main = print (myQuickSort "Hello World!")
" !HWdellloor"


====================
end section 1.5

end Programming in Haskell, 1st ed.
(learn haskell fast and hard was also covered earlier in this document)
