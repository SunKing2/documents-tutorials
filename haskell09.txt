<srk> ghcid is "IDE", it just compiles your code over and over and tells you that it compiles
<srk> which often is the only thing you need
Cl: You generally won't type much of your program into ghci
<srk> but mostly for testing/trying out stuff
Cl: but ghci is not the same thing as ghcid
Cl: you don't type anything into ghcid
Cl: It just sits there and lets you know the status of your code -- any errors or warnings which presently exist in it
ct: neophytes: my setup is: sublime text 3 in one 1/2 of the window to the left, a terminal with ghci on 1/2 of the window to the right - then I use SublimeLinter-hlint to give me tips inside sublime text for improvements
N: I am wanting to learn functional programming to learn its connections to category theory (math guy here), not much of a programmer so I don't know anything about setting up IDEs or anything as such
ct: neophytes: I recommend just going with a text editor with syntax highlighting and a plugin system + ghci like I described
fs: "ghci is simply a CLI IDE installable as part of any haskell platform, so all you have to do is familiarize yourself with the standard packaging system used on your *nix variant and you should be all set, it's easy"
fs: neophytes: have you gone and downloaded https://www.haskell.org/platform/mac.html yet?
N: no
N: I need a step-by-step process of what to do.
ct: freeside: why not start with stack from the start?
<srk> +1 for stack
N: I don't know what a 'stack' is -- I literally am, new
fs: because he wants a one-click situation, and https://www.haskell.org/platform/mac.html includes stack now
fs: neophytes: get that download going and we can figure out a text editor next
fs: idris, the new 007
ct: neophytes: you probably want to setup hlint integration some time in the future
Mn: just do something that works and you'll complete your future needs in time
<minn> It's been a while since I've used Haskell. Am I supposed to be using Stack to manage packages (among other things) instead of Cabal, or is that not standard?
mc: Both cabal and stack are standards.
N: Ii only downloaded atom, not sure what to download next
Mn: $ghci in terminal
ct: neophytes: then you edit a file, save it, and go to your terminal, load it, and when you make changes you do :r
Mn: then >print "Hey I'm doing some Haskell"
: Prelude> print "Hey GHCI, my name is neophytes" "Hey GHCI, my name is neophytes" Prelude>
Cl: centril: But you don't have to be all that smart to read a file which has a bunch of strings and file names together with source locations and use that to decide where to jump
N: ok cool
ct: neophytes: Monoide: print "Hello World"
N: so this is the REPL?
ct: neophytes: yes
N: ok
Mn: neophytes: congratulations, you just did your very first haskell line of code
Cl: centril: and then leave it up to some other program to generate that file :)
N: sweet!
fs: Prelude> take 10 $ map (+10) [1..]
N: how do I use the compiler to write code and so on and see it produce a value
ct: Cale: I think language-server is better
fs: now you need to boot up Atom
Cl: This was originally used for C, but most editors support it, and there are programs to generate them for other languages
N: Prelude> take 10 $ map (+10) [1..] [11,12,13,14,15,16,17,18,19,20] Prelude>
N: okay atom is up
Mn: neophytes: the compiler is named 'ghc', you can run it for command line: $ghc you_code.hs
mc: emacs certainly has limits to how smart it can be. Not smart enough to solve the halting problem, something like that. :)
Mn: it procuces (if no errors) an executable file you_code
Cl: ST3 does have a CTags plugin, but it seems to ignore my existing tags file
ct: effing emacs & vim...
ct: they should both be banned
ct: nano rules!
mc: nano doesn't have rules.
Mn: nano doesn't
er: how am i supposed to connect to IRC without emacs?
er: how am i supposed to read my mail?
N: okay so I have atom up what is the "Hello world" of Haskell?
ct: monochrom: I know of one thing to do in vim: :q!
N: I wanna try to compile it
er: neophytes: main = putStrLn "Hello world!"
N: k
Mn: neophytes: to compile it you need to do a module, but then you also want to read a real documentation / tutorial / book
Cl: ertes: I use HexChat for IRC, and usually a web browser for mail, though my phone often competes with that.
er: neophytes: this line is enough as your main module
N: ok
Mn: (instead of asking IRC, which is fine, but maybe not really needed here)
ct: neophytes: but you should always try to put types on functions, so main :: IO () \n main = putStrLn "Hello World!"
N: I saved it as hello_world.hs
N: main = putStrLn "Hello world!"
N: is my source code
N: so I wanna compile it
er: neophytes: here is the quick way to compile it: ghc -O -o hello_world hello_world.hs
er: put an ".exe" there, if you're on windows
N: ok
ct: neophytes: for real world compilation of haskell, you should take a look at cabal & stack
mc: You don't need "-o hello_world" for this. Unix or Windows.
ct: noone uses ghc directly like that in real world scenarios
N: did I not download that already?
Mn: ghc hello_world.hs is enough
fs: did it compile? good. you now have enough equipment to be dangerous. your next step should be to choose between http://haskellbook.com/ and https://fldit-www.cs.uni-dortmund.de/~peter/PS07/HR.pdf
ct: neophytes: yes =) but DLing and using is not the same ;)
er: neophytes: which OS?
ct: freeside: why not http://learnyouahaskell.com/chapters ?
N: recursive-functions-MacBook-Pro:Haskell ternary$ ghc hello_world.hs [1 of 1] Compiling Main ( hello_world.hs, hello_world.o ) Linking hello_world ... recursive-functions-MacBook-Pro:Haskell ternary$
N: did that work?
er: neophytes: looks good
Mn: neophytes: try it!
N: it didn't print hello world did it?
ct: neophytes: ./hello_world.o
er: neophytes: you should now have a file called "hello_world", which is executable
er: that's your actual program
N: ecursive-functions-MacBook-Pro:Haskell ternary$ ./hello_world.o -bash: ./hello_world.o: Permission denied recursive-functions-MacBook-Pro:Haskell ternary$
ct: neophytes: or: $ ./hello_world
Mn: not the .o
ct: Monoide: depends on the OS, no ?
Mn: it's an object file
ct: oh, right
Mn: it's not an executable
mc: The OS only determines whether you say ./ or .\
ct: but still, object files might be executable sometimes
ct: or .o files i mean
Mn: well you need linkage
fs: why is it that on the radio, everybody spells out URLs saying "backslash" when they should say "slash"?
er: whether you say "./" or ""â€¦ windows has the horrible habit of including . in PATH
N: so what do I do to execute it
ct: neophytes: ./hello_world
Mn: (you also want to read a few stuff about your Mac's terminal ;)
er: neophytes: or: ./hell<tab>
N: sweet it worked
fs: it worked! now go buy the purple book
ct: neophytes: you can always use ls -lah to see the files in your directory
er: neophytes: try this command: cabal --version
er: neophytes: if you get a bunch of version numbers, you now have a minimal development environment
N: ownloading the latest package list from hackage.haskell.org
fs: http://haskellbook.com/assets/img/sample.pdf
N: Downloading the latest package list from hackage.haskell.org cabal-install version 1.24.0.2 compiled using version 1.24.2.0 of the Cabal library recursive-functions-MacBook-Pro:Haskell ternary$
mc: Neat.
N: freeside: thanks just bought the book
N: so Im good to go thru that now?
fs: yeah
N: (the book)
Mn: yup
N: ok sweet
N: sweet do
N: thanks guys for setting me up
Mn: now you need some brain, some hard work and a lot of coffee / tea
ct: neophytes: now that you've setup haskell... forget all about it, and read:
mc: No, you need sleep.
ct: neophytes: http://www.cse.chalmers.se/edu/year/2016/course/DAT140/
N: I'm new to programming + math stuff but very open to lots of hard work + coffeee & tea
Mn: (and this channel to answer all your silly questions ;)
er: neophytes: if you have any questions your learning resource doesn't cover, feel free to ask here
N: centril: just checked and they have a free pdf version of the book you linked with my university access -- will check this out too
N: ertes: sweet thanks
fs: and being a mathematician you should probably also read some of the foundational papers, like, hm, http://publications.lib.chalmers.se/records/fulltext/local_135303.pdf
<ezyang> String, Text, ByteString, Foundation String; anything I've missed?
justicefries left
er: neophytes: if you happen to live in germany near stuttgart, you can also visit my workshop on wednesday =)
N: excellent thanks freeside (I am an aspiring mathematician / newbie I should say ;-) ) but I have a deep interest in this!
ct: neophytes: you probably want Types and Programming Languages (Pierce)
N: shoot I live in US lol else I would!
fs: you can also pick up some videos at https://www.cs.uoregon.edu/research/summerschool/summer10/curriculum.html
Mn: you would love https://projecteuler.net/
N: wow they have videos
N: excellent
Mn: because it's a bunch of exercices to learn haskell, plus it's algorithmic / maths
fs: also https://www.cs.uoregon.edu/research/summerschool/summer16/curriculum.php
N: centril: which one should I read first
ct: neophytes: or, just move to Sweden, Gothenburg and start studying at Chalmers Technical University, the world capital of Haskell, Agda, and functional programming
N: also which universities have research groups in this?
ct: Chalmers, Chalmers, Chalmers
N: k
N: this is my new favorite irc channel
fs: you are our new favourite haskell newbie
er: i'm not sure haskellbook.com is suitable, if you're new to programming altogether
mc: The enthusiasm of #haskell participants ensures that every student has enough reading material to learn Haskell for 7 lifetimes (and therefore never getting to use Haskell).
N: haha
Mn: monochrom: :D
ct: neophytes: but... beware, Donald Trump said that stuff is going on in Sweden :P
fs: we're also up for a good editor war anytime
N: trump says a lot of things
N: I'll be careful ;-)
ct: monochrom: lol :D
N: k im gonna go read
N: thanks guys
ct: ertes: I'd say for a newbie, start with learnyouahaskell
Mn: do https://projecteuler.net/ to practice
<minn> I learned to program from Thompson's "The Craft of Functional Programming" and supplementing with some papers by Wadler. Would recommend to anyone.
Mn: (it will get you in algorithmic / recursive problems)
er: centril: honestly i don't recommend that one, regardless of whether one is a programmer or not
Mn: (so you can learn good usage without going too deep too quickly)
fs: i just worked through the purple book, i'm a big fan of it. imho the best and most comprehensive
ct: neophytes: so: my recommendation: learnyouahaskell -> your book -> write a compiler for a small imperative language + a small functional language -> (forget about haskell) -> http://www.cse.chalmers.se/edu/year/2016/course/DAT140/ -> Types and Programming Languages
er: the resource i'd recommend without hesitation is this: https://www.seas.upenn.edu/~cis194/spring13/lectures.html
fs: i was disappointed by Learn You A Haskell -- it had the whimsy of Why's Poignant Guide to Ruby but not the rigour
N: centril: sounds good
N: copying your comment
N: pasting in my notepad
ct: freeside: you dont want rigour for an intro course to FP...
ct: you want: get shit done fast
mc: freeside: Does "purple book" mean haskellbook.com?
fs: yes
<MarcelineVQ> ertes: idk about that, haskellbook.com is called haskell programming from first principles for a reason, I'm not sure there's a better place to start with haskell if you're entirely new to programming
ct: and for that LYaH (LearnYouAHaskell) is nice
er: CIS194 has, as far as i see, very good pacing *and* correctness
mc: I don't think LYAH gets shit done fast either.
er: MarcelineVQ: the name alone doesn't cut it though =)
fs: neophytes, you should get used to using Atom instead of TextEdit
Mn: neophytes: stop listening to us
ct: neophytes: for the purposes of mathematical proofs, you want to learn haskell just to familiarize yourself with coding in FP, and then move on to Agda
Mn: just do what tf you want and have fun
Mn: fun is what you want, and should be your only goal
ct: also ^
fs: also **
Mn: if you want ideas to have fun, I have a bunch just ask me :)
N: okay centril
N: https://www.youtube.com/playlist?list=PLbgaMIhjbmEnaH_LTkxLI7FMa2HsnawM_ -- just found this guy
ct: neophytes: but if you want general purpose programming, then haskell is really nice
er: centril: you know, you could just pay someone to beat the crap out of youâ€¦ doing proofs in agda achieves the same thing, but much much slower
mc: Also, rigour or not depends on personality, not absolute mandate.
fs: looks good ... soon you too will be able to talk about FP in incomprehensible terms
ct: ertes: say what ?
N: lol
N: im gonna go read
N: thanks guyys
N: afk
N: guys*
er: centril: the next time you pass six universe level variables around you will remember this conversation
N: afk now
ct: neophytes: now I have to thank you... gonna watch those
mc: FWIW for example when I learned Haskell (or anything) I went for rigour. Maybe not absolute rigour, but rigour enough so that it was scientific not cargo-culting.
ct: ertes: :D
ct: ertes: at least it doesn't have :t * :: * ^^
mc: But cargo-culting works fine for some people too, so I don't always inflict my degree of rigour to everyone.
fs: you don't want to build your tech stack on sand.
fs: known knowns are preferable to known unknowns and unknown knowns. 
